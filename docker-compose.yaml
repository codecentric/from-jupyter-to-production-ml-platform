---
services:

  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_MLFLOW_USER: ${MYSQL_MLFLOW_USER}
      MYSQL_MLFLOW_PASSWORD: ${MYSQL_MLFLOW_PASSWORD}
      MYSQL_ZENML_USER: ${MYSQL_ZENML_USER}
      MYSQL_ZENML_PASSWORD: ${MYSQL_ZENML_PASSWORD}
      MYSQL_FEAST_USER: ${MYSQL_FEAST_USER}
      MYSQL_FEAST_PASSWORD: ${MYSQL_FEAST_PASSWORD}
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost","-u","root","-p${MYSQL_ROOT_PASSWORD}" ]
      timeout: 20s
      retries: 10
    volumes:
      - mysql-db-volume:/var/lib/mysql
      - ./docker/scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    network_mode: host

  registry:
    image: codecentric/from-jupyter-to-production-registry
    environment:
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_REALM= ${REGISTRY_AUTH_HTPASSWD_REALM}
      - REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd/users.htpasswd
      - REGISTRY_USERNAME=${DOCKER_REGISTRY_USER}
      - REGISTRY_PASSWORD=${DOCKER_REGISTRY_PASSWORD}
    volumes:
      - registry-auth:/auth
      - registry-data:/var/lib/registry
    network_mode: host

  label-studio:
    image: heartexlabs/label-studio:latest
    command: ${LABEL_STUDIO_START_COMMAND}
    volumes:
      - label-studio:/label-studio
    depends_on:
      minio:
        condition: service_healthy
      init-minio:
        condition: service_started
    network_mode: host


  code-server:
    image: codecentric/from-jupyter-to-production-code-server
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - SUDO_PASSWORD=${CODE_SERVER_SUDO_PASSWORD}
      - DEFAULT_WORKSPACE=/workspace
      - MYSQL_FEAST_USER=${MYSQL_FEAST_USER}
      - MYSQL_FEAST_PASSWORD=${MYSQL_FEAST_PASSWORD}
      - PYTHONWARNINGS="ignore::DeprecationWarning"
    volumes:
      - ./:/workspace
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8443/" ]
      interval: 30s
      timeout: 10s
      retries: 3
    network_mode: host

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_STORAGE_USE_HTTPS=False
      - MINIO_PORT=9000
      - MINIO_CONSOLE_PORT=9001
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s
    volumes:
      - minio:/data
    network_mode: host

  init-minio:
    image: minio/minio
    entrypoint: /init-minio.sh
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_STORAGE_USE_HTTPS=False
      - MINIO_PORT=9000
      - MINIO_CONSOLE_PORT=9001
    volumes:
      - ./data/tasks:/init-data/tasks
      - ./docker/scripts/init-minio.sh:/init-minio.sh
    depends_on:
      minio:
        condition: service_healthy
    network_mode: host

  zenml:
    image: zenmldocker/zenml-server:latest
    environment:
      - ZENML_DISABLE_CLIENT_SERVER_MISMATCH_WARNING=True
      - ZENML_STORE_URL=${ZENML_STORE_URL}
      - ZENML_SERVER_AUTO_ACTIVATE=1
      - ZENML_DEFAULT_USER_NAME=${ZENML_DEFAULT_USER_NAME}
      - ZENML_DEFAULT_USER_PASSWORD=${ZENML_DEFAULT_USER_PASSWORD}
    depends_on:
      mysql:
        condition: service_healthy
    volumes:
      - ./src/titanicsurvivors/feature_repo:/feature_repo
    extra_hosts:
      - "host.docker.internal:host-gateway"
    network_mode: host

  mlflow:
    image: codecentric/from-jupyter-to-production-mlflow
    environment:
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
      - MLFLOW_ARTIFACT_ROOT=${MLFLOW_ARTIFACT_ROOT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - MLFLOW_DB_URI=${MLFLOW_DB_URI}
      - MLFLOW_PORT=${MLFLOW_PORT}
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5001/" ]
      interval: 30s
      timeout: 10s
      retries: 3
    network_mode: host

    depends_on:
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    network_mode: host


volumes:
  mysql-db-volume:
  registry-auth:
  registry-data:
  minio:
  label-studio:
  postgres_data: